name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"

jobs:
  cancel-previous:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.7.0
        with:
          access_token: ${{ github.token }}

  check-secret:
    if: |
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      SECRETS_SET: ${{ steps.check-secret.outputs.SECRETS_SET }}
    steps:
      - id: check-secret
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "SECRETS_SET: ${{ env.SNYK_TOKEN != '' }}"
          echo "::set-output name=SECRETS_SET::${{ env.SNYK_TOKEN != '' }}"

  lint:
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm config set script-shell $(which bash)
      - run: npm ci
      - run: npm run lint

  duplication:
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]') && ! startsWith( github.head_ref, 'dependabot' )"

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm config set script-shell $(which bash)
      - run: npm ci
      - run: npm run duplication
      - uses: actions/upload-artifact@v2
        with:
          name: duplication-report
          path: report

  audit:
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]') && ! startsWith( github.head_ref, 'dependabot' )"

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm audit --production

  security:
    needs:
      - check-secret
    if: |
      github.ref == 'refs/heads/main' &&
      needs.check-secret.outputs.SECRETS_SET == 'true' &&
       ! contains(toJSON(github.event.commits.*.message), '[skip-ci]')

    runs-on: ubuntu-latest

    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm config set script-shell $(which bash)
      - run: npm ci
      # We've seen situations where snyk is unavailable
      # so do a bit of retry on failure
      - uses: nick-invision/retry@v2
        with:
          timeout_seconds: 120
          max_attempts: 3
          retry_wait_seconds: 10
          command: npm run security

  build:
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm config set script-shell $(which bash)
      - run: npm ci
      - run: npm run build

  test-node-api:
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm config set script-shell $(which bash)
      - run: npm ci
      - run: npm run cover:node-api
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report-node-${{ matrix.node-version }}
          path: coverage/node-api

  check-coverage:
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]') && ! startsWith( github.head_ref, 'dependabot' )"

    needs:
      - test-node-api

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - run: npm config set script-shell $(which bash)
      - run: npm ci
      - uses: actions/download-artifact@v2
      - run: mkdir -p coverage
      - run: |
          for directory in $(ls -d code-coverage-report-*); do
            mv "${directory}" "coverage/." 
          done
          ls -l coverage
      - run: npm run report:cover
      - uses: codacy/codacy-coverage-reporter-action@master
        if: always()
        continue-on-error: true
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage/full/lcov.info


  merge:
    needs:
      - check-secret
      - test-node-api
      - lint
      - audit
      - security
      - build
      - duplication
    if: |
      needs.check-secret.outputs.SECRETS_SET == 'true' &&
      startsWith( github.head_ref, 'dependabot' ) &&
      ! contains(toJSON(github.event.commits.*.message), '[skip-ci]')

    runs-on: ubuntu-latest

    steps:
      - uses: ahmadnassri/action-dependabot-auto-merge@v2
        with:
          target: major
          github-token: ${{ secrets.MERGE_TOKEN }}

  publish:
    needs:
      - check-secret
      - check-coverage
      - lint
      - audit
      - security
      - build
      - duplication
    if: |
      needs.check-secret.outputs.SECRETS_SET == 'true' &&
      github.ref == 'refs/heads/main' && 
      ! contains(toJSON(github.event.commits.*.message), '[skip-ci]') && 
      ! contains(toJSON(github.event.commits.*.message), '[skip-release]')

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
          registry-url: https://registry.npmjs.org/
      - name: Publish and Tag
        run: |
          npm config set script-shell $(which bash)
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          CURRENT_VERSION=$(npm --unsafe-perm show "${PACKAGE_NAME}" version)
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=${CURRENT_VERSION}"
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
          if [ "$CURRENT_VERSION" = "$PACKAGE_VERSION" ]; then
            echo "Version ${PACKAGE_VERSION} has already been published"
            echo "PACKAGE_VERSION=" >> $GITHUB_ENV
          else
            npm ci
            # need to bump version in README.md to PACKAGE_VERSION
            # so that the correct version appears on npmjs.com
            npm run sync-readme-version
            npm run change-log
            npm run release-notes
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add README.md
            git add CHANGELOG.md
            git commit -m "chore(release): updated CHANGELOG.md and version in README.md to $PACKAGE_VERSION [skip-ci]"
            npm pack
            npm run do-publish
            git config user.name github-actions
            git config user.email github-actions@github.com
            git tag "v${PACKAGE_VERSION}"
            git pull --rebase
            git push --tags
            echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          fi
          PACKAGE_NAME_WITHOUT_AT="${PACKAGE_NAME#@}"
          echo "TGZ_NAME=${PACKAGE_NAME_WITHOUT_AT//\//-}" >> $GITHUB_ENV
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: Create Release
        if: ${{ env.PACKAGE_VERSION != '' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: Release v${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false
          body_path: RELEASE.md

      - name: Upload Release Asset
        if: ${{ env.PACKAGE_VERSION != '' }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ env.TGZ_NAME }}-${{ env.PACKAGE_VERSION }}.tgz
          asset_name: ${{ env.TGZ_NAME }}-${{ env.PACKAGE_VERSION }}.tgz
          asset_content_type: application/gzip

      - name: Bump Version
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          npm ci
          npm --unsafe-perm --no-git-tag-version version $(npm run --silent get-release-type)
          git add package.json
          git add package-lock.json
          # We don't want to bump the version in the README.md
          # otherwise people reading on github will try to
          # use the unreleased version.
          # instead, we need to update it, just before we pack and tag
          NEXT_VERSION=$(node -p "require('./package.json').version")
          git commit -m "chore(release): version bump to $NEXT_VERSION. :tada: [skip-ci]"
          git pull --rebase
          git push origin HEAD:main
